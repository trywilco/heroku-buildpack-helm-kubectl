#!/bin/sh

BUILD_DIR=$1
CACHE_DIR=$2
ENV_DIR=$3

echo "Cleaning $CACHE_DIR/kubectl"
rm -rf $CACHE_DIR/kubectl

KUBECTL_VERSION=$(curl -L -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)

# Download and install kubectl
echo "Installing kubectl version $KUBECTL_VERSION"
DOWNLOAD_URL="https://storage.googleapis.com/kubernetes-release/release/$KUBECTL_VERSION/bin/linux/amd64/kubectl"

mkdir -p "$CACHE_DIR/kubectl/$KUBECTL_VERSION"
KUBECTL_CACHE_FILE="$CACHE_DIR/kubectl/$KUBECTL_VERSION/kubectl"

if [ ! -e "$KUBECTL_CACHE_FILE" ]; then
  echo "Downloading kubectl"
  curl --silent --show-error -o "$KUBECTL_CACHE_FILE" "$DOWNLOAD_URL"
  chmod +x "$KUBECTL_CACHE_FILE"
else
  echo "Restoring cached kubectl binary"
fi

mkdir -p "$BUILD_DIR/.heroku/kubectl/bin"
cp -a "$KUBECTL_CACHE_FILE" "$BUILD_DIR/.heroku/kubectl/bin/"

mkdir -p "$BUILD_DIR/.profile.d"
cat > "$BUILD_DIR/.profile.d/kubectl.sh" <<'KUBECTL'
export PATH="$HOME/.heroku/kubectl/bin:$PATH"

if [ ! -z "$KUBECONFIG_BASE64" ]; then
  mkdir -p "$HOME/.kube"
  echo "$KUBECONFIG_BASE64" | base64 -d > "$HOME/.kube/config"
fi
KUBECTL


# Download and install helm

HELM_VERSION="v3.10.1"
echo "Installing helm version $HELM_VERSION"

mkdir -p "$CACHE_DIR/helm/$HELM_VERSION"
HELM_CACHE_FILE="$CACHE_DIR/helm/$HELM_VERSION/helm"
TEMP_HELM_DOWNLOAD_DIR="$CACHE_DIR/helm/tmp"

if [ ! -e "$HELM_CACHE_FILE" ]; then
  echo "Downloading helm"
  mkdir -p $TEMP_HELM_DOWNLOAD_DIR
  curl -fsSL -o "$TEMP_HELM_DOWNLOAD_DIR/helm.tar.gz" "https://get.helm.sh/helm-$HELM_VERSION-linux-amd64.tar.gz"
  tar -zxvf "$TEMP_HELM_DOWNLOAD_DIR/helm.tar.gz" -C "$CACHE_DIR/helm/tmp"
  cp "$CACHE_DIR/helm/tmp/linux-amd64/helm" $HELM_CACHE_FILE
  chmod +x "$HELM_CACHE_FILE"
else
  echo "Restoring cached helm binary (version $HELM_VERSION)"
fi

mkdir -p "$BUILD_DIR/.heroku/helm/bin"
cp -a "$HELM_CACHE_FILE" "$BUILD_DIR/.heroku/helm/bin/"

mkdir -p "$BUILD_DIR/.profile.d"
cat > "$BUILD_DIR/.profile.d/helm.sh" <<'HELM'
export PATH="$HOME/.heroku/helm/bin:$PATH"
HELM
